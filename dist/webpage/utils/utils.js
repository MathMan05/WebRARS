setTheme();export function setTheme(){let name=localStorage.getItem("theme");if(!name){localStorage.setItem("theme","Dark");name="Dark"}document.body.className=name+"-theme"}class Directory{static home=this.createHome();handle;writeWorker;constructor(handle){this.handle=handle}static async createHome(){navigator.storage.persist();const home=new Directory(await navigator.storage.getDirectory());return home}async *getAllInDir(){for await(const[name,handle]of this.handle.entries()){if(handle instanceof FileSystemDirectoryHandle){yield[name,new Directory(handle)]}else if(handle instanceof FileSystemFileHandle){yield[name,await handle.getFile()]}else{console.log(handle,"oops :3")}}console.log("done")}async getRawFileHandler(name){return await this.handle.getFileHandle(name)}async getRawFile(name){try{return await (await this.handle.getFileHandle(name)).getFile()}catch{return undefined}}async getString(name){try{return await (await this.getRawFile(name)).text()}catch{return undefined}}initWorker(){if(this.writeWorker)return this.writeWorker;this.writeWorker=new Worker("/utils/dirrWorker.js");this.writeWorker.onmessage=event=>{const res=this.wMap.get(event.data[0]);this.wMap.delete(event.data[0]);if(!res)throw new Error("Res is not defined here somehow");res(event.data[1])};return this.writeWorker}wMap=new Map;async setStringWorker(name,value){const worker=this.initWorker();const random=Math.random();worker.postMessage([name,value,random]);return new Promise(res=>{this.wMap.set(random,res)})}async setString(name,value){const file=await this.handle.getFileHandle(name,{create:true});const contents=new TextEncoder().encode(value);if(file.createWritable){const stream=await file.createWritable({keepExistingData:false});await stream.write(contents);await stream.close();return true}else{return await this.setStringWorker(file,contents)}}async getDir(name){return new Directory(await this.handle.getDirectoryHandle(name,{create:true}))}}export{Directory};
//# sourceMappingURL=utils.js.map