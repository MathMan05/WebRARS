import{instructions,registerNames}from"../fetches.js";import{I18n}from"../i18n.js";import{runTimeError}from"./emulator.js";function parseInt(inst){const opcode=inst&127;const funct3=(inst&7<<12)>>12;const funct7=(inst&127<<25)>>25;const rd=(inst&31<<7)>>7;const rs1=(inst&31<<15)>>15;const rs2=(inst&31<<20)>>20;function R(){return{type:"R",opcode,funct3,funct7,rd,rs1,rs2}}function I(){return{type:"I",opcode,funct3,rd,rs1,imm:rs2|funct7<<5}}function S(){return{type:"S",opcode,funct3,rs1,rs2,imm:rd|funct7<<5}}function B(){const imm=(rd&1)<<11|rd&30|(funct7&63)<<5|(funct7&64)<<6;return{type:"B",opcode,funct3,rs1,rs2,imm:imm>4095?imm-8192:imm}}function J(){const imm=rs1<<15|funct3<<12|(rs2&1)<<11|rs2&30|(funct7&63)<<5|(funct7&64)<<14;return{type:"J",opcode,rd,imm:imm>1048575?imm-2097152:imm}}function U(){return{type:"U",opcode,rd,imm:inst&0xfffff000}}function W(){return{type:"W",inst}}switch(opcode){case 51:return R();case 19:case 27:case 3:case 103:return I();case 35:return S();case 99:return B();case 111:return J();case 55:case 23:return U();case 115:return W();default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(opcode.toString(2)))}}const instFilter=instructions.filter(_=>_.type!=="fake"&&_.type!=="veryfake");function toAsm(numb){const parse=parseInt(numb);function toRegiName(numb,float){if(float){return registerNames.float[numb][0]}else{return registerNames.int[numb][0]}}switch(parse.type){case"R":{const inst=instFilter.find(_=>_.type=="R"&&_.opcode==parse.opcode&&_.funct3==parse.funct3&&_.funct7==parse.funct7);let name="unknowinst";let args=[false,false,false];if(inst&&inst.type=="R"){name=inst.name;args=inst.args.map(_=>_==="freg")}return`${name} ${toRegiName(parse.rd,args[0])},${toRegiName(parse.rs1,args[1])},${toRegiName(parse.rs2,args[2])}`}case"I":{const inst=instFilter.find(_=>_.type=="I"&&_.opcode==parse.opcode&&_.funct3==parse.funct3);let name="unknowinst";let args=[false,false,false];const strImm=parse.imm<0?`-0x${Math.abs(parse.imm).toString(16)}`:`0x${parse.imm.toString(16)}`;if(parse.opcode===1){if(parse.imm>>5===0){return`slli ${toRegiName(parse.rd,args[0])},${toRegiName(parse.rs1,args[1])},${strImm}`}else{return"unknown"}}if(parse.opcode===5){if(parse.imm>>5===0){return`srli ${toRegiName(parse.rd,args[0])},${toRegiName(parse.rs1,args[1])},${strImm}`}else if(parse.imm>>5===32){const strImm=`0x${(parse.imm&31).toString(16)}`;return`srai ${toRegiName(parse.rd,args[0])},${toRegiName(parse.rs1,args[1])},${strImm}`}else{return"unknown"}}if(inst&&inst.type=="I"){name=inst.name;args=inst.args.map(_=>_==="freg")}if(!inst||inst.type!="I"||inst.args[1]!=="offreg"){return`${name} ${toRegiName(parse.rd,args[0])},${toRegiName(parse.rs1,args[1])},${strImm}`}else{return`${name} ${toRegiName(parse.rd,args[0])},${strImm}(${toRegiName(parse.rs1,args[1])})`}}case"S":{const inst=instFilter.find(_=>_.type=="S"&&_.opcode==parse.opcode&&_.funct3==parse.funct3);let name="unknowinst";let args=[false,false,false];if(inst&&inst.type=="S"){name=inst.name;args=inst.args.map(_=>_==="freg")}const strImm=parse.imm<0?`-0x${Math.abs(parse.imm).toString(16)}`:`0x${parse.imm.toString(16)}`;return`${name} ${toRegiName(parse.rs2,args[0])},${strImm}(${toRegiName(parse.rs1,false)})`}case"B":{const inst=instFilter.find(_=>_.type=="B"&&_.opcode==parse.opcode&&_.funct3==parse.funct3);let name="unknowinst";let args=[false,false,false];if(inst&&inst.type=="B"){name=inst.name;args=inst.args.map(_=>_==="freg")}const strImm=parse.imm<0?`-0x${Math.abs(parse.imm).toString(16)}`:`0x${parse.imm.toString(16)}`;return`${name} ${toRegiName(parse.rs1,args[0])},${toRegiName(parse.rs2,false)},${strImm}`}case"U":{const inst=instFilter.find(_=>_.type=="U"&&_.opcode==parse.opcode);let name="unknowinst";if(inst){name=inst.name}const strImm=parse.imm<0?`-0x${Math.abs(parse.imm).toString(16)}`:`0x${parse.imm.toString(16)}`;return`${name} ${toRegiName(parse.rd,false)} ${strImm}`}case"J":{const inst=instFilter.find(_=>_.type=="J"&&_.opcode==parse.opcode);let name="unknowinst";if(inst){name=inst.name}const strImm=parse.imm<0?`-0x${Math.abs(parse.imm).toString(16)}`:`0x${parse.imm.toString(16)}`;return`${name} ${toRegiName(parse.rd,false)},${strImm}`}case"W":{const inst=instFilter.find(_=>_.type=="W"&&_.code==parse.inst);let name="unknowinst";if(inst){name=inst.name}return`${name}`}}}export{parseInt,toAsm};
//# sourceMappingURL=parseInt.js.map