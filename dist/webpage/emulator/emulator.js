import{I18n}from"../i18n.js";import{parseInt}from"./parseInt.js";parseInt;class CSymstem{pc;ram;intRegis;console;constructor(sys){this.pc=sys.pc;this.ram=sys.ram.compact();this.console=sys.console;this.intRegis=new BigInt64Array([...sys.intRegis])}unCompact(){return new Symstem(this.ram.toRam(),this.console,new BigInt64Array([...this.intRegis]),this.pc)}}class Symstem{ram;pc;intRegis;UintRegis;console;done=false;constructor(ram,console,intRegis=new BigInt64Array(32),pc=4194304){this.ram=ram;this.console=console;this.intRegis=intRegis;this.UintRegis=new BigUint64Array(intRegis.buffer);this.pc=pc}compact(){return new CSymstem(this)}async step(){const inst=parseInt(this.ram.getUint32(this.pc));switch(inst.type){case"U":this.runU(inst);break;case"I":this.runI(inst);break;case"R":this.runR(inst);break;case"S":this.runS(inst);break;case"W":return await this.runW(inst);case"J":this.runJ(inst);break;case"B":this.runB(inst);break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}this.intRegis[0]=0n;return true}runB(inst){switch(inst.opcode){case 99:switch(inst.funct3){case 0:if(this.intRegis[inst.rs1]===this.intRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;case 1:if(this.intRegis[inst.rs1]!==this.intRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;case 4:if(this.intRegis[inst.rs1]<this.intRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;case 5:if(this.intRegis[inst.rs1]>=this.intRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;case 6:if(this.UintRegis[inst.rs1]<this.UintRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;case 7:if(this.UintRegis[inst.rs1]>=this.UintRegis[inst.rs2]){this.pc+=inst.imm}else{this.pc+=4}break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}}runJ(inst){if(inst.opcode==111){this.intRegis[inst.rd]=BigInt(this.pc+4);this.pc+=inst.imm}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}}async runW(inst){if(inst.inst===115){this.pc+=4;switch(this.intRegis[17]){case 1n:this.console.addIO(this.intRegis[10]+"");break;case 4n:{let address=Number(this.intRegis[10]);let str="";while(true){const char=this.ram.getUint8(address++);if(char===0){break}str+=String.fromCharCode(char)}this.console.addIO(str);break}case 10n:this.done=true;this.console.addIO("\n"+I18n.programDone("0")+"\n\n");return false;case 11n:this.console.addIO(new TextDecoder().decode(new Uint8Array([Number(this.intRegis[10]&65535n)])));break;default:throw new runTimeError(I18n.runTimeErrors.unknownSysCall("0x"+this.intRegis[17].toString(16)))}return true}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction((inst.inst&127)+""))}}runU(inst){switch(inst.opcode){case 55:this.intRegis[inst.rd]=BigInt(inst.imm);this.pc+=4;return;case 23:this.intRegis[inst.rd]=BigInt(inst.imm+this.pc);this.pc+=4;return}}runS(inst){switch(inst.opcode){case 35:switch(inst.funct3){case 0:this.ram.setInt8(this.intRegis[inst.rs1]+BigInt(inst.imm),this.intRegis[inst.rs2]);break;case 1:this.ram.setInt16(this.intRegis[inst.rs1]+BigInt(inst.imm),this.intRegis[inst.rs2]);break;case 2:this.ram.setInt32(this.intRegis[inst.rs1]+BigInt(inst.imm),this.intRegis[inst.rs2]);break;case 3:this.ram.setBigInt64(this.intRegis[inst.rs1]+BigInt(inst.imm),this.intRegis[inst.rs2]);break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}this.pc+=4;return;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}}runR(inst){switch(inst.opcode){case 51:switch(inst.funct3){case 0:switch(inst.funct7){case 0:this.intRegis[inst.rd]=this.intRegis[inst.rs1]+this.intRegis[inst.rs2];break;case 32:this.intRegis[inst.rd]=this.intRegis[inst.rs1]-this.intRegis[inst.rs2];break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 1:this.intRegis[inst.rd]=this.intRegis[inst.rs1]<<this.intRegis[inst.rs2];break;case 2:if(inst.funct7===0){this.UintRegis[inst.rd]=this.UintRegis[inst.rs1]<this.UintRegis[inst.rs2]?1n:0n}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 3:if(inst.funct7===0){this.intRegis[inst.rd]=this.intRegis[inst.rs1]<this.intRegis[inst.rs2]?1n:0n}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 4:if(inst.funct7===0){this.intRegis[inst.rd]=this.intRegis[inst.rs1]^this.intRegis[inst.rs2]}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 5:if(inst.funct7===0){this.UintRegis[inst.rd]=this.UintRegis[inst.rs1]>>this.UintRegis[inst.rs2]}else if(inst.funct7===32){this.intRegis[inst.rd]=this.intRegis[inst.rs1]>>this.intRegis[inst.rs2]}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 6:if(inst.funct7===0){this.intRegis[inst.rd]=this.intRegis[inst.rs1]|this.intRegis[inst.rs2]}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 7:if(inst.funct7===0){this.intRegis[inst.rd]=this.intRegis[inst.rs1]&this.intRegis[inst.rs2]}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}this.pc+=4;break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}}runI(inst){switch(inst.opcode){case 19:switch(inst.funct3){case 0:this.intRegis[inst.rd]=this.intRegis[inst.rs1]+BigInt(inst.imm);break;case 1:if(inst.imm>>5===0){this.intRegis[inst.rd]=this.intRegis[inst.rs1]<<(BigInt(inst.imm)&31n);break}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}case 2:this.UintRegis[inst.rd]=this.UintRegis[inst.rs1]<BigInt(inst.imm>>>0)?1n:0n;break;case 3:this.intRegis[inst.rd]=this.intRegis[inst.rs1]<BigInt(inst.imm)?1n:0n;break;case 4:this.intRegis[inst.rd]=this.intRegis[inst.rs1]^BigInt(inst.imm);break;case 5:if(inst.imm>>5===0){this.UintRegis[inst.rd]=this.UintRegis[inst.rs1]>>(BigInt(inst.imm)&31n)}else if(inst.imm>>5===32){this.intRegis[inst.rd]=this.intRegis[inst.rs1]>>(BigInt(inst.imm)&31n)}else{throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}break;case 6:this.intRegis[inst.rd]=this.intRegis[inst.rs1]|BigInt(inst.imm);break;case 7:this.intRegis[inst.rd]=this.intRegis[inst.rs1]&BigInt(inst.imm);break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}this.pc+=4;break;case 3:switch(inst.funct3){case 0:this.intRegis[inst.rd]=BigInt(this.ram.getInt8(this.intRegis[inst.rs1]+BigInt(inst.imm)));break;case 1:this.intRegis[inst.rd]=BigInt(this.ram.getInt16(this.intRegis[inst.rs1]+BigInt(inst.imm)));break;case 2:this.intRegis[inst.rd]=BigInt(this.ram.getInt32(this.intRegis[inst.rs1]+BigInt(inst.imm)));break;case 3:this.intRegis[inst.rd]=this.ram.getBigInt64(this.intRegis[inst.rs1]+BigInt(inst.imm));break;case 4:this.intRegis[inst.rd]=BigInt(this.ram.getUint8(this.intRegis[inst.rs1]+BigInt(inst.imm)));break;case 5:this.intRegis[inst.rd]=BigInt(this.ram.getUint16(this.intRegis[inst.rs1]+BigInt(inst.imm)));break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}this.pc+=4;break;case 115:if(inst.funct3===0){this.intRegis[inst.rd]=BigInt(this.pc+4);this.pc+=inst.imm+Number(this.intRegis[inst.rs1])}break;default:throw new runTimeError(I18n.runTimeErrors.unknownInstruction(inst.opcode+""))}}}class runTimeError extends Error{constructor(message){super(message)}}export{runTimeError,Symstem,CSymstem};
//# sourceMappingURL=emulator.js.map