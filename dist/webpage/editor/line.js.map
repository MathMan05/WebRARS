{"version":3,"sources":["../../../src/webpage/editor/line.ts"],"sourcesContent":["import {parseLine} from \"../assembler/parser.js\";\nimport {Editor} from \"./editor.js\";\n\nclass Line {\n\treadonly str: string;\n\treadonly owner: Editor;\n\terrored = false;\n\t/**\n\t * str should *not* contain any new lines\n\t */\n\tconstructor(str: string, owner: Editor) {\n\t\tthis.str = str;\n\t\tthis.owner = owner;\n\t\treturn this;\n\t}\n\terror() {\n\t\tthis.errored = true;\n\t}\n\tdrawLine(\n\t\tctx: CanvasRenderingContext2D,\n\t\tx: number,\n\t\ty: number,\n\t\tcharWidth: number,\n\t\tcursors: number[] = [],\n\t) {\n\t\tlet chars = 0;\n\t\tfor (const thing of parseLine(this.str)) {\n\t\t\tlet color: string;\n\t\t\t//TODO undo hardcoding of values\n\t\t\tswitch (thing.type) {\n\t\t\t\tcase \"invalidString\":\n\t\t\t\tcase \"invalidChar\":\n\t\t\t\t\tcolor = \"red\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"instruction\":\n\t\t\t\t\tcolor = \"blue\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"register\":\n\t\t\t\t\tcolor = \"red\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"variable\":\n\t\t\t\t\tcolor = \"goldenrod\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"string\":\n\t\t\t\tcase \"comment\":\n\t\t\t\tcase \"char\":\n\t\t\t\t\tcolor = \"green\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"directive\":\n\t\t\t\t\tcolor = \"magenta\";\n\t\t\t\t\tbreak;\n\t\t\t\t//@ts-expect-error\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn(\"case \" + thing.type + \" is not defined\");\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"space\":\n\t\t\t\tcase \"label\":\n\t\t\t\tcase \"parentheses\":\n\t\t\t\tcase \"unknown\":\n\t\t\t\t\tcolor = \"black\";\n\t\t\t}\n\t\t\tctx.fillStyle = color;\n\t\t\tconst split = thing.content.split(\"\t\");\n\t\t\tlet i = 0;\n\t\t\tfor (const str of split) {\n\t\t\t\ti++;\n\t\t\t\tctx.fillText(str, x + chars * charWidth, y);\n\t\t\t\tchars += str.length;\n\t\t\t\tif (split.length !== i) {\n\t\t\t\t\tchars++;\n\t\t\t\t\tchars = Math.ceil(chars / this.owner.tabLength) * this.owner.tabLength;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tctx.fillStyle = \"black\";\n\t\tfor (const cursor of cursors) {\n\t\t\tctx.fillRect(x + this.moveCursor(cursor, 0) * charWidth, y, 1, this.owner.fontSize);\n\t\t}\n\t}\n\tdeleteRanges(ranges: [number, number][]): {line: Line; fakeCurors: number[]} {\n\t\tconst real = ranges\n\t\t\t.flat()\n\t\t\t.sort((a, b) => a - b)\n\t\t\t.map((_) => this.getActualIndex(_));\n\t\tlet prev = 0;\n\t\tfor (const thing in real) {\n\t\t\treal[thing] -= prev;\n\t\t\tprev += real[thing];\n\t\t}\n\t\tlet subString = this.str;\n\t\tlet strings: string[] = [];\n\t\tfor (const thing of real) {\n\t\t\tif (thing === 0) {\n\t\t\t\tstrings.push(\"\");\n\t\t\t} else {\n\t\t\t\tstrings.push(subString.substring(0, thing));\n\t\t\t\tsubString = subString.substring(thing);\n\t\t\t}\n\t\t}\n\t\tstrings = strings.filter((_, i) => !(i % 2));\n\t\tlet runningTotal = 0;\n\t\tconst fakeCurors: number[] = [];\n\t\tfor (const thing of strings) {\n\t\t\trunningTotal += thing.length;\n\t\t\tfakeCurors.push(runningTotal);\n\t\t}\n\t\treturn {\n\t\t\tline: new Line(strings.join(\"\") + subString, this.owner),\n\t\t\tfakeCurors: fakeCurors,\n\t\t};\n\t}\n\tgetRanges(ranges: [number, number][]): string[] {\n\t\tconst real = ranges\n\t\t\t.flat()\n\t\t\t.sort((a, b) => a - b)\n\t\t\t.map((_) => this.getActualIndex(_));\n\t\tlet prev = 0;\n\t\tfor (const thing in real) {\n\t\t\treal[thing] -= prev;\n\t\t\tprev += real[thing];\n\t\t}\n\t\tlet subString = this.str;\n\t\tlet strings: string[] = [];\n\t\tfor (const thing of real) {\n\t\t\tif (thing === 0) {\n\t\t\t\tstrings.push(\"\");\n\t\t\t} else {\n\t\t\t\tstrings.push(subString.substring(0, thing));\n\t\t\t\tsubString = subString.substring(thing);\n\t\t\t}\n\t\t}\n\t\tstrings = strings.filter((_, i) => i % 2);\n\t\treturn strings;\n\t}\n\tgetFakeIndex(index: number) {\n\t\tif (index <= 0) return 0;\n\t\tlet i = 0;\n\t\tlet real = 0;\n\t\tfor (const char of this.str) {\n\t\t\treal++;\n\t\t\ti++;\n\t\t\tif (char === \"\t\") {\n\t\t\t\ti = Math.ceil(i / 8) * 8;\n\t\t\t}\n\t\t\tif (real === index) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n\tgetActualIndex(index: number) {\n\t\tif (index <= 0) return 0;\n\t\tlet i = 0;\n\t\tlet real = 0;\n\t\tfor (const char of this.str) {\n\t\t\treal++;\n\t\t\ti++;\n\t\t\tif (char === \"\t\") {\n\t\t\t\ti = Math.ceil(i / 8) * 8;\n\t\t\t}\n\t\t\tif (i >= index) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn real;\n\t}\n\tgetWordBounds(index: number): [number, number] {\n\t\tif (this.str === \"\" && index === 0) return [0, 0];\n\t\tconst real = this.getActualIndex(index);\n\t\tlet len = 0;\n\t\tlet word: string | undefined = undefined;\n\t\tfor (const [part] of this.str.matchAll(/([a-zA-Z0-9]+)|(\\s+)|(.)/g)) {\n\t\t\tlen += part.length;\n\t\t\tif (len >= real) {\n\t\t\t\tword = part;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!word) throw Error(\"Word not found somehow\");\n\t\tconst bounds = [len - word.length, len].map((_) => this.getFakeIndex(_));\n\t\treturn bounds as [number, number];\n\t}\n\tmoveCursor(current: number, by: -2 | -1 | 0 | 1 | 2): number {\n\t\tlet real = this.getActualIndex(current);\n\t\tlet prev = this.str[real - 1];\n\t\tlet next = this.str[real];\n\t\tswitch (by) {\n\t\t\tcase 0:\n\t\t\t\treturn this.getFakeIndex(real);\n\t\t\tcase 1:\n\t\t\t\tif (next) {\n\t\t\t\t\treal++;\n\t\t\t\t\treturn this.getFakeIndex(real);\n\t\t\t\t} else {\n\t\t\t\t\treturn Infinity;\n\t\t\t\t}\n\t\t\tcase -1:\n\t\t\t\tif (prev) {\n\t\t\t\t\treal--;\n\t\t\t\t\treturn this.getFakeIndex(real);\n\t\t\t\t} else {\n\t\t\t\t\treturn -Infinity;\n\t\t\t\t}\n\t\t\tcase 2:\n\t\t\t\tif (next) {\n\t\t\t\t\tconst sutStr = this.str.substring(real, this.str.length);\n\t\t\t\t\tconst match = sutStr.match(\n\t\t\t\t\t\t/\\s+|[`~!%^&*()\\-=+\\[\\]{}\\\\|;:'\",<.>\\/?]+\\s*|[A-Z0-9]?[a-z0-9]+[\\s_]*|[A-Z0-9]+(?![a-z0-9])[\\s_]*|./,\n\t\t\t\t\t);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\treal += match[0].length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treal++;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getFakeIndex(real);\n\t\t\t\t} else {\n\t\t\t\t\treturn Infinity;\n\t\t\t\t}\n\t\t\tcase -2:\n\t\t\t\tif (prev) {\n\t\t\t\t\tconst sutStr = this.str.substring(0, real);\n\t\t\t\t\tconst match = sutStr.match(\n\t\t\t\t\t\t/(\\s+|[`~!%^&*()\\-=+\\[\\]{}\\\\|;:'\",<.>\\/?]+\\s*|[A-Z0-9]?[a-z0-9]+[\\s_]*|[A-Z0-9]+(?![a-z0-9])[\\s_]*|.)$/,\n\t\t\t\t\t);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\treal -= match[0].length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treal--;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getFakeIndex(real);\n\t\t\t\t} else {\n\t\t\t\t\treturn -Infinity;\n\t\t\t\t}\n\t\t}\n\t}\n\tpaste(\n\t\tpossitions: number[],\n\t\ttext: string,\n\t): {\n\t\tlines: Line[];\n\t\tcursors: {line: number; index: number}[];\n\t} {\n\t\tpossitions.sort((a, b) => a - b);\n\t\tconst real = possitions.map((_) => this.getActualIndex(_));\n\t\tlet prev = 0;\n\t\tfor (const thing in real) {\n\t\t\treal[thing] -= prev;\n\t\t\tprev += real[thing];\n\t\t}\n\t\tlet subString = this.str;\n\t\tconst strings: string[] = [];\n\t\tfor (const thing of real) {\n\t\t\tif (thing === 0) {\n\t\t\t\tstrings.push(\"\");\n\t\t\t} else {\n\t\t\t\tstrings.push(subString.substring(0, thing));\n\t\t\t\tsubString = subString.substring(thing);\n\t\t\t}\n\t\t}\n\t\tconst lines = text.split(\"\\n\");\n\t\tconst lineArr: Line[] = [];\n\t\tconst last = (lines.length - 1).toString();\n\t\tconst cursors: {line: number; index: number}[] = [];\n\t\tlet cary = \"\";\n\t\tfor (const thing of strings) {\n\t\t\tcary = cary + thing;\n\t\t\tfor (let index in lines) {\n\t\t\t\tlet line = cary + lines[index];\n\t\t\t\tcary = \"\";\n\t\t\t\tif (last === index) {\n\t\t\t\t\tcary = line;\n\t\t\t\t\tcursors.push({\n\t\t\t\t\t\tline: lineArr.length,\n\t\t\t\t\t\tindex: this.length(line),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlineArr.push(new Line(line, this.owner));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcary += subString;\n\t\tif (cary) {\n\t\t\tlineArr.push(new Line(cary, this.owner));\n\t\t}\n\t\treturn {\n\t\t\tlines: lineArr,\n\t\t\tcursors,\n\t\t};\n\t}\n\tinsert(\n\t\tpossitions: number[],\n\t\ttext: string,\n\t): {\n\t\tlines: Line[];\n\t\tcursors: {line: number; index: number}[];\n\t\torphaned?: {\n\t\t\ttext: string;\n\t\t\tcursors: number[];\n\t\t};\n\t} {\n\t\tpossitions.sort((a, b) => a - b);\n\t\tconst real = possitions.map((_) => this.getActualIndex(_));\n\t\tlet prev = 0;\n\t\tfor (const thing in real) {\n\t\t\treal[thing] -= prev;\n\t\t\tprev += real[thing];\n\t\t}\n\t\tlet subString = this.str;\n\t\tconst strings: string[] = [];\n\t\tfor (const thing of real) {\n\t\t\tif (thing === 0) {\n\t\t\t\tstrings.push(\"\");\n\t\t\t} else {\n\t\t\t\tstrings.push(subString.substring(0, thing));\n\t\t\t\tsubString = subString.substring(thing);\n\t\t\t}\n\t\t}\n\n\t\tif (text.length !== 1) {\n\t\t\tif (text === \"Backspace\") {\n\t\t\t\tconst newText = strings.map((_) => _.substring(0, _.length - 1)).join(\"\") + subString;\n\t\t\t\tconst line = new Line(newText, this.owner);\n\t\t\t\tlet prev = 0;\n\t\t\t\tfor (const thing in real) {\n\t\t\t\t\treal[thing] += prev;\n\t\t\t\t\tprev = real[thing];\n\t\t\t\t\treal[thing] += -thing - 1;\n\t\t\t\t}\n\n\t\t\t\tif (strings[0] !== \"\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlines: [line],\n\t\t\t\t\t\tcursors: real\n\t\t\t\t\t\t\t.map((_) => line.getFakeIndex(_))\n\t\t\t\t\t\t\t.map((index) => {\n\t\t\t\t\t\t\t\treturn {line: 0, index};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlines: [],\n\t\t\t\t\t\tcursors: [],\n\t\t\t\t\t\torphaned: {\n\t\t\t\t\t\t\ttext: newText,\n\t\t\t\t\t\t\tcursors: real,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else if (text === \"Enter\") {\n\t\t\t\tstrings.push(subString);\n\t\t\t\tlet spaces = \"\";\n\t\t\t\tconst start = this.str.match(/^\\s*/gm);\n\t\t\t\tif (start) {\n\t\t\t\t\tspaces = start[0];\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tlines: strings.map((_, i) => new Line((i ? spaces : \"\") + _, this.owner)),\n\t\t\t\t\tcursors: strings\n\t\t\t\t\t\t.map((_, a) => a)\n\t\t\t\t\t\t.filter((_) => _ !== 0)\n\t\t\t\t\t\t.map((_) => {\n\t\t\t\t\t\t\treturn {line: _, index: this.length(spaces)};\n\t\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow Error(\"not handled yet\");\n\t\t} else {\n\t\t\tstrings.push(subString);\n\t\t\tconst line = new Line(strings.join(text), this.owner);\n\t\t\tlet prev = 0;\n\t\t\tfor (const thing in real) {\n\t\t\t\treal[thing] += prev;\n\t\t\t\tprev = real[thing];\n\t\t\t\treal[thing] += +thing + 1;\n\t\t\t}\n\t\t\tconst fakes = real.map((_) => line.getFakeIndex(_));\n\t\t\treturn {\n\t\t\t\tlines: [line],\n\t\t\t\tcursors: fakes.map((index) => {\n\t\t\t\t\treturn {line: 0, index};\n\t\t\t\t}),\n\t\t\t};\n\t\t}\n\t}\n\tlength(str = this.str) {\n\t\tlet i = 0;\n\t\tfor (const char of str) {\n\t\t\ti++;\n\t\t\tif (char === \"\t\") {\n\t\t\t\ti = Math.ceil(i / 8) * 8;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t}\n}\nexport {Line};\n"],"names":["parseLine","Line","str","owner","errored","constructor","error","drawLine","ctx","x","y","charWidth","cursors","chars","thing","color","type","console","warn","fillStyle","split","content","i","fillText","length","Math","ceil","tabLength","cursor","fillRect","moveCursor","fontSize","deleteRanges","ranges","real","flat","sort","a","b","map","_","getActualIndex","prev","subString","strings","push","substring","filter","runningTotal","fakeCurors","line","join","getRanges","getFakeIndex","index","char","getWordBounds","len","word","undefined","part","matchAll","Error","bounds","current","by","next","Infinity","sutStr","match","paste","possitions","text","lines","lineArr","last","toString","cary","insert","newText","orphaned","spaces","start","fakes"],"mappings":"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"}