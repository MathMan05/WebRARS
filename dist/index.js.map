{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport compression from \"compression\";\nimport express, {Request, Response} from \"express\";\nimport fs from \"node:fs/promises\";\nimport path from \"node:path\";\nimport {fileURLToPath} from \"node:url\";\nimport process from \"node:process\";\n\nconst devmode = (process.env.NODE_ENV || \"development\") === \"development\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\ntype dirtype = Map<string, dirtype | string>;\nasync function getDirectories(path: string): Promise<dirtype> {\n\treturn new Map(\n\t\tawait Promise.all(\n\t\t\t(await fs.readdir(path)).map(async function (file): Promise<[string, string | dirtype]> {\n\t\t\t\tif ((await fs.stat(path + \"/\" + file)).isDirectory()) {\n\t\t\t\t\treturn [file, await getDirectories(path + \"/\" + file)];\n\t\t\t\t} else {\n\t\t\t\t\treturn [file, file];\n\t\t\t\t}\n\t\t\t}),\n\t\t),\n\t);\n}\nlet dirs: dirtype | undefined = undefined;\nasync function combinePath(path: string, tryAgain = true): Promise<string> {\n\tif (!dirs) {\n\t\tdirs = await getDirectories(__dirname);\n\t}\n\tconst pathDir = path\n\t\t.split(\"/\")\n\t\t.reverse()\n\t\t.filter((_) => _ !== \"\");\n\tfunction find(arr: string[], search: dirtype | string | undefined): boolean {\n\t\tif (search == undefined) return false;\n\t\tif (arr.length === 0) {\n\t\t\treturn typeof search == \"string\";\n\t\t}\n\t\tif (typeof search == \"string\") {\n\t\t\treturn false;\n\t\t}\n\t\tconst thing = arr.pop() as string;\n\t\treturn find(arr, search.get(thing));\n\t}\n\tif (find(pathDir, dirs)) {\n\t\treturn __dirname + path;\n\t} else {\n\t\tif (!path.includes(\".\")) {\n\t\t\tconst str = await combinePath(path + \".html\", false);\n\t\t\tif (str !== __dirname + \"/webpage/index.html\") {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t}\n\t\tif (devmode && tryAgain) {\n\t\t\tdirs = await getDirectories(__dirname);\n\t\t\treturn combinePath(path, false);\n\t\t}\n\t\treturn __dirname + \"/webpage/index.html\";\n\t}\n}\n\nconst app = express();\n\napp.use(compression());\n\napp.use(\"/getupdates\", async (_req: Request, res: Response) => {\n\ttry {\n\t\tconst stats = await fs.stat(path.join(__dirname, \"webpage\"));\n\t\tres.send(stats.mtimeMs.toString());\n\t} catch (error) {\n\t\tconsole.error(\"Error getting updates:\", error);\n\t\tres.status(500).send(\"Error getting updates\");\n\t}\n});\n\napp.use(\"/\", async (req: Request, res: Response) => {\n\tif (req.path === \"/\") {\n\t\tres.sendFile(path.join(__dirname, \"webpage\", \"index.html\"));\n\t\treturn;\n\t}\n\n\tif (req.path.startsWith(\"/invite/\")) {\n\t\tres.sendFile(path.join(__dirname, \"webpage\", \"invite.html\"));\n\t\treturn;\n\t}\n\tconst filePath = await combinePath(\"/webpage/\" + req.path);\n\tres.sendFile(filePath);\n});\n\napp.set(\"trust proxy\", (ip: string) => ip.startsWith(\"127.\"));\n\nconst PORT = process.env.PORT || Number(process.argv[2]) || 8081;\napp.listen(PORT, () => {\n\tconsole.log(`Server running on port ${PORT}`);\n});\n"],"names":["compression","express","fs","path","fileURLToPath","process","devmode","env","NODE_ENV","__filename","url","__dirname","dirname","getDirectories","Map","Promise","all","readdir","map","file","stat","isDirectory","dirs","undefined","combinePath","tryAgain","pathDir","split","reverse","filter","_","find","arr","search","length","thing","pop","get","includes","str","app","use","_req","res","stats","join","send","mtimeMs","toString","error","console","status","req","sendFile","startsWith","filePath","set","ip","PORT","Number","argv","listen","log"],"mappings":"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"}